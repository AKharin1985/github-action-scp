"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var billy_core_1 = require("@fivethree/billy-core");
var promise_1 = __importDefault(require("simple-git/promise"));
// @App() // uncomment to test the plugin
var GitPlugin = /** @class */ (function () {
    function GitPlugin() {
    }
    GitPlugin.prototype.git_checkout = function (checkoutWhat, gitRepoPath) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.checkout(checkoutWhat)];
            });
        });
    };
    /**
     * Clone a git repository into working directory or specify a local path
     *
     * @param {string} repoPath url of the repository that will be cloned
     * @param {string} [localPath] clone to path
     * @returns
     * @memberof GitPlugin
     */
    GitPlugin.prototype.git_clone = function (repoPath, localPath) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default();
                return [2 /*return*/, git.clone(repoPath, localPath)];
            });
        });
    };
    GitPlugin.prototype.git_commit = function (message, gitRepoPath, files, options) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.commit(message, files, options)];
            });
        });
    };
    GitPlugin.prototype.git_push = function (gitRepoPath, remote, branch, options) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.push(remote, branch, options)];
            });
        });
    };
    GitPlugin.prototype.git_pull = function (gitRepoPath, remote, branch, options) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.pull(remote, branch, options)];
            });
        });
    };
    GitPlugin.prototype.git_porcelain = function (gitRepoPath) {
        return __awaiter(this, void 0, void 0, function () {
            var git, status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        git = promise_1.default(gitRepoPath);
                        return [4 /*yield*/, git.status()];
                    case 1:
                        status = _a.sent();
                        return [2 /*return*/, status.isClean()];
                }
            });
        });
    };
    GitPlugin.prototype.git_status = function (gitRepoPath) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.status()];
            });
        });
    };
    GitPlugin.prototype.git_tag = function (args, gitRepoPath) {
        return __awaiter(this, void 0, void 0, function () {
            var git;
            return __generator(this, function (_a) {
                git = promise_1.default(gitRepoPath);
                return [2 /*return*/, git.tag(args)];
            });
        });
    };
    __decorate([
        billy_core_1.Action("git checkout")
    ], GitPlugin.prototype, "git_checkout", null);
    __decorate([
        billy_core_1.Action("Clone a repo")
    ], GitPlugin.prototype, "git_clone", null);
    __decorate([
        billy_core_1.Action("git commit")
    ], GitPlugin.prototype, "git_commit", null);
    __decorate([
        billy_core_1.Action("git push")
    ], GitPlugin.prototype, "git_push", null);
    __decorate([
        billy_core_1.Action("git pull")
    ], GitPlugin.prototype, "git_pull", null);
    __decorate([
        billy_core_1.Action("Checks if git status is clean")
    ], GitPlugin.prototype, "git_porcelain", null);
    __decorate([
        billy_core_1.Action("get git status")
    ], GitPlugin.prototype, "git_status", null);
    __decorate([
        billy_core_1.Action("git tag")
    ], GitPlugin.prototype, "git_tag", null);
    GitPlugin = __decorate([
        billy_core_1.Plugin("Git Plugin for billy")
    ], GitPlugin);
    return GitPlugin;
}());
exports.GitPlugin = GitPlugin;
